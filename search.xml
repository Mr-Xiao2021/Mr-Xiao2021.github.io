<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cuda的安装</title>
      <link href="/archives/577a06e7.html"/>
      <url>/archives/577a06e7.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>【5分钟学会在Windows上搭建模型训练环境 | WSL安装| CUDA | Conda | Unsloth】 <a href="https://www.bilibili.com/video/BV1iatTeGENk/?share_source=copy_web&amp;vd_source=63b0d084447abdc150ddebfd32add0b3">https://www.bilibili.com/video/BV1iatTeGENk/?share_source=copy_web&amp;vd_source=63b0d084447abdc150ddebfd32add0b3</a></p><p>【CUDA编程基础入门系列（持续更新）】 <a href="https://www.bilibili.com/video/BV1sM4y1x7of/?p=3&amp;share_source=copy_web&amp;vd_source=63b0d084447abdc150ddebfd32add0b3">https://www.bilibili.com/video/BV1sM4y1x7of/?p=3&amp;share_source=copy_web&amp;vd_source=63b0d084447abdc150ddebfd32add0b3</a></p><blockquote><p>安装遇到问题？<br><a href="https://zhuanlan.zhihu.com/p/599286889">https://zhuanlan.zhihu.com/p/599286889</a></p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性DP</title>
      <link href="/archives/ea2a560b.html"/>
      <url>/archives/ea2a560b.html</url>
      
        <content type="html"><![CDATA[<h1 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h1><p>这是一个简单的动规板子题。</p><p>给出一个由 $n(n\le 5000)$ 个不超过 $10^6$ 的正整数组成的序列。请输出这个序列的<strong>最长上升子序列</strong>的长度。</p><p>最长上升子序列是指，从原序列中<strong>按顺序</strong>取出一些数字排在一起，这些数字是<strong>逐渐增大</strong>的。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>开数组$lts$，lts[0] &#x3D; nums[0]，开始遍历nums，遇到nums[i]时判断是否可以追加到lts数组后面，如果大于lts末尾直接追加，否则遍历lts找到第一个&gt;&#x3D;nums[i]的位置替换为nums[i]，这是为什么呢？因为让lts变得小一些是为了后续更容易吸纳小一点的也追加到lts中。<br>例如：$nums[] &#x3D; [4,10,4,3,8,9]$<br>那么根据上述流程追踪$lts$数组可得：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">4 </span><br><span class="line">4 10 </span><br><span class="line">4 10 </span><br><span class="line">3 10 </span><br><span class="line">3 8 </span><br><span class="line">3 8 9 </span><br></pre></td></tr></table></figure><p> <strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lts</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        lts[idx++] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = idx - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; lts[j]) lts[idx++] = nums[i];</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 采用线性方法，时间复杂度高</span></span><br><span class="line">                <span class="comment">// while(j &gt;= 0 &amp;&amp; lts[j] &gt;= nums[i]) j--;</span></span><br><span class="line">                <span class="comment">// lts[j+1] = nums[i];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用二分查找来找到s中第一个 &gt;= q[i] 的位置</span></span><br><span class="line">                <span class="type">int</span> pos = <span class="built_in">lower_bound</span>(lts.<span class="built_in">begin</span>(), lts.<span class="built_in">begin</span>()+idx, nums[i]) - lts.<span class="built_in">begin</span>();</span><br><span class="line">                <span class="comment">// 如果没找到，追加到lts数组</span></span><br><span class="line">                <span class="keyword">if</span>(pos == idx) lts[idx++] = nums[i];</span><br><span class="line">                <span class="keyword">else</span> lts[pos] = nums[i]; <span class="comment">// 否则更新已有位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; idx; k++) cout &lt;&lt; lts[k] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> idx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h1><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列的长度。如果不存在 公共子序列 ，返回 0 。</p><blockquote><p>一个字符串的子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。<br>两个字符串的公共子序列是这两个字符串所共同拥有的子序列。</p></blockquote><p><a href="https://leetcode.cn/problems/qJnOS7/solutions/1025575/zui-chang-gong-gong-zi-xu-lie-by-leetcod-ugg7">https://leetcode.cn/problems/qJnOS7/solutions/1025575/zui-chang-gong-gong-zi-xu-lie-by-leetcod-ugg7</a></p><p><img src="https://ooo.0x0.ooo/2024/10/10/ODU4sX.png" alt="alt text"></p><ul><li>注意dp更新的依赖方向，特别是边界问题<br><img src="https://ooo.0x0.ooo/2024/10/10/ODUEGj.png" alt="alt text"></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = text1.<span class="built_in">size</span>(), m = text2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> || m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// dp[i][j] 表示s1[1-i]和s2[1-j]最长公共子序列长度，处理中字符串从1计数</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + (text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="最短编辑距离"><a href="#最短编辑距离" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h1><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。<br>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="https://ooo.0x0.ooo/2024/10/10/ODUHot.png" alt="alt text"></p><ul><li>特别注意下标问题</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = word1.<span class="built_in">size</span>(), m = word2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> m;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// dp[i][j]表示s1[1:i] 和 s2[1:j]最短编辑距离，索引是从1开始。</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) dp[i][<span class="number">0</span>] = i;  <span class="comment">// 这里应该是i而不是i-1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++) dp[<span class="number">0</span>][j] = j;  <span class="comment">// 这里应该是j而不是j-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// i-1和j-1是为了规避边界问题</span></span><br><span class="line">                <span class="keyword">if</span>(word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>]) dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">// 增删改</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">                    dp[i][j] += <span class="number">1</span>; <span class="comment">// 操作本身加一次</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="辨析：距离字典两次编辑以内的单词"><a href="#辨析：距离字典两次编辑以内的单词" class="headerlink" title="辨析：距离字典两次编辑以内的单词"></a>辨析：距离字典两次编辑以内的单词</h2><p>给你两个字符串数组<code>queries</code>和<code>dictionary</code>。数组中所有单词都只包含小写英文字母，且长度都相同。<br>一次编辑中，你可以从<code>queries</code>中选择一个单词，将任意一个字母修改成任何其他字母。从<code>queries</code>中找到所有满足以下条件的字符串：不超过<code>两次编辑内</code>，字符串与<code>dictionary</code>中某个字符串相同。<br>请你返回<code>queries</code>中的单词列表，这些单词距离 dictionary 中的单词 编辑次数<code>不超过</code>两次 。单词返回的顺序需要与<code>queries</code>中原本顺序相同。</p><blockquote><p>例如：</p><p>输入：queries &#x3D; [“word”,”note”,”ants”,”wood”], dictionary &#x3D; [“wood”,”joke”,”moat”]</p><p>输出：[“word”,”note”,”wood”]</p></blockquote><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>注意和上题不同，要求编辑距离&lt;&#x3D;2，说明两个string的字符差异个数不能超过2个即可~，无需dp即可解决。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_dis</span><span class="params">(string s1, string s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 记录s1和s2字符差异数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span>(s1[i] != s2[i]) </span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(count &gt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">twoEditWords</span><span class="params">(vector&lt;string&gt;&amp; queries, vector&lt;string&gt;&amp; dictionary)</span> </span>&#123;</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> s1: queries)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> s2: dictionary)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">count_dis</span>(s1,s2) &lt;= <span class="number">2</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(s1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS</title>
      <link href="/archives/dc9314c3.html"/>
      <url>/archives/dc9314c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><h2 id="排列数字"><a href="#排列数字" class="headerlink" title="排列数字"></a>排列数字</h2><blockquote><p>给定一个整数$n$，将数字$1∼n$排成一排，将会有很多种排列方法。现在，请你按照字典序将所有的排列方法输出。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cout &lt;&lt; q[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(q,q+n));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> vst[N],path[N],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == n) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cout &lt;&lt; path[i]+<span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span>(vst[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            path[x] = i,vst[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">            vst[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>不保证字典序的深搜<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> path[N],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == n) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cout &lt;&lt; path[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt; n; i++)<span class="comment">// i取x时原地不动</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(path[x],path[i]); </span><br><span class="line">        <span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">swap</span>(path[x],path[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) path[i] = i + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h2><p><img src="https://cdn.acwing.com/media/article/image/2019/06/08/19_860e00c489-1_597ec77c49-8-queens.png" alt="n-Queen"></p><blockquote><p>n−皇后问题是指将$n$个皇后放在$n×n$的国际象棋棋盘上，使得皇后不能相互攻击到，即任意两个皇后都不能处于同一行、同一列或同一斜线上。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">// row可以省略</span></span><br><span class="line"><span class="type">int</span> q[N][N],col[N],row[N],dg[N],udg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 表示现在在第几层</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == n)&#123;<span class="comment">//找到目标状态</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; (q[i][j] ? <span class="string">&#x27;Q&#x27;</span> : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="comment">// 寻找合适的列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!col[j] &amp;&amp; !dg[x-j + n] &amp;&amp; !row[x] &amp;&amp; !udg[x+j]) </span><br><span class="line">        &#123;</span><br><span class="line">            col[j] = dg[x-j + n] = row[x] = udg[x+j] = q[x][j]=  <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">            col[j] = dg[x-j + n] = row[x] = udg[x+j] = q[x][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分配工作问题"><a href="#分配工作问题" class="headerlink" title="分配工作问题"></a>分配工作问题</h2><p><img src="https://ooo.0x0.ooo/2024/10/05/O4XC6j.png" alt="description"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> res, minres = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> col[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &gt;= n) </span><br><span class="line">    &#123;</span><br><span class="line">        minres = <span class="built_in">min</span>(minres, res);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 剪枝，一旦结果大于最小值，也就没有必要向下搜索</span></span><br><span class="line">        <span class="keyword">if</span>(!col[i] &amp;&amp; res &lt; minres)</span><br><span class="line">        &#123;</span><br><span class="line">            col[i] = <span class="literal">true</span>;</span><br><span class="line">            res += g[u][i];</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 恢复现场</span></span><br><span class="line">            col[i] = <span class="literal">false</span>;</span><br><span class="line">            res -= g[u][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            cin &gt;&gt; g[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; minres &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布线问题"><a href="#布线问题" class="headerlink" title="布线问题"></a>布线问题</h2><p><img src="https://ooo.0x0.ooo/2024/10/05/O4XR41.png" alt="description"></p><p><img src="https://ooo.0x0.ooo/2024/10/05/O4XPiG.png" alt="analysis"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// min_cost 初始化为较大的值</span></span><br><span class="line"><span class="type">int</span> n, min_cost = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> conn[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; arrange, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">costCalculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 元件编号从 1 开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            sum += conn[i][j] * <span class="built_in">abs</span>(arrange[i] - arrange[j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backTrack</span><span class="params">(<span class="type">int</span> step)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (step == n) &#123;</span><br><span class="line">        <span class="type">int</span> cur_cost = <span class="built_in">costCalculate</span>();</span><br><span class="line">        <span class="comment">// 费用更小，更新</span></span><br><span class="line">        <span class="keyword">if</span> (cur_cost &lt; min_cost) &#123;</span><br><span class="line">            min_cost = cur_cost;</span><br><span class="line">            <span class="comment">// 更新最优序列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                ans[i] = arrange[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 排列选择</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = step; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 注：交换的不是下标，而是排列数组的值</span></span><br><span class="line">        <span class="built_in">swap</span>(arrange[step], arrange[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下一个位置</span></span><br><span class="line">        <span class="built_in">backTrack</span>(step + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">swap</span>(arrange[step], arrange[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="comment">// 初始化排列数组</span></span><br><span class="line">    arrange.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">    ans.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        arrange[i] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;conn[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">backTrack</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, min_cost);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.acwing.com/">https://www.acwing.com/</a></li><li><a href="https://blog.csdn.net/m0_73172647/article/details/138707102">https://blog.csdn.net/m0_73172647/article/details/138707102</a></li><li><a href="https://blog.csdn.net/weixin_51567051/article/details/128144863">https://blog.csdn.net/weixin_51567051/article/details/128144863</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云存储架构和关键技术</title>
      <link href="/archives/86a5d496.html"/>
      <url>/archives/86a5d496.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>云存储是一种网络存储模型，它使用云计算架构来存储、管理、备份数据，并通过互联网提供数据访问。云存储的关键技术主要包括以下几个方面：</p></blockquote><ol><li><strong>数据分布与冗余存储技术</strong>：<ul><li><strong>实现技术</strong>：使用哈希算法（如一致性哈希）将数据均匀分布到多个存储节点上。同时，通过冗余存储（如RAID技术、副本机制）来保证数据的可靠性和可用性。例如，在HDFS（Hadoop Distributed File System）中，数据被分割成块，并在多个节点上存储多个副本。</li></ul></li><li><strong>数据压缩与去重技术</strong>：<ul><li><strong>实现技术</strong>：数据压缩可以减少存储空间和提高传输效率，常见的压缩算法有LZ77、LZ78、Deflate等。数据去重技术通过识别和删除重复的数据块来减少存储需求，常用的技术有哈希算法去重、内容寻址存储（CAS）等。</li></ul></li><li><strong>数据加密技术</strong>：<ul><li><strong>实现技术</strong>：为了保障数据安全性，云存储通常会使用对称加密（如AES）和非对称加密（如RSA）相结合的方式来加密数据。加密过程可以在客户端进行，也可以在服务端进行。</li></ul></li><li><strong>负载均衡技术</strong>：<ul><li><strong>实现技术</strong>：通过负载均衡算法（如轮询、最少连接、IP哈希等）分配请求到不同的服务器或存储节点，确保系统资源的有效利用和服务的稳定性。</li></ul></li><li><strong>数据备份与恢复技术</strong>：<ul><li><strong>实现技术</strong>：定期或不定期的数据备份可以防止数据丢失。备份可以是全量备份或增量备份。恢复技术则确保在数据损坏或丢失后能够快速恢复。</li></ul></li><li><strong>存储虚拟化技术</strong>：<ul><li><strong>实现技术</strong>：存储虚拟化将多个物理存储设备抽象为一个逻辑存储单元，提高了存储资源的灵活性和利用率。常见的技术有存储区域网络（SAN）、网络附加存储（NAS）以及虚拟化软件层（如VMware vSphere）。</li></ul></li><li><strong>分布式文件系统</strong>：<ul><li><strong>实现技术</strong>：分布式文件系统如Google File System（GFS）、Hadoop Distributed File System（HDFS）等，它们可以横跨成百上千台服务器，提供高吞吐量的数据访问能力。</li></ul></li><li><strong>对象存储技术</strong>：<ul><li><strong>实现技术</strong>：对象存储是一种将数据作为对象进行管理的存储架构，每个对象包含数据、元数据和一个唯一的标识符。它通常用于大规模、非结构化数据的存储，如Amazon S3。</li></ul></li><li><strong>数据容错与自愈技术</strong>：<ul><li><strong>实现技术</strong>：通过心跳检测、故障转移、自动重新分配数据等技术来实现系统的容错和自愈能力。</li></ul></li><li><strong>访问控制与认证技术</strong>：<ul><li><strong>实现技术</strong>：利用访问控制列表（ACL）、角色基础访问控制（RBAC）、安全断言标记语言（SAML）等技术来管理用户对存储资源的访问权限和身份认证。<br>云存储技术的实现依赖于强大的基础设施和高度优化的软件栈，这些技术相互配合，共同确保了云存储服务的性能、可靠性、安全性和可扩展性。</li></ul></li></ol><blockquote><p>云存储架构中的关键技术涵盖了从数据存储、传输到安全保障的多个方面。这些技术确保了云存储系统的高可用性、扩展性、安全性和性能。以下是云存储架构的主要关键技术：</p></blockquote><h3 id="1-分布式存储技术"><a href="#1-分布式存储技术" class="headerlink" title="1. 分布式存储技术"></a>1. <strong>分布式存储技术</strong></h3><ul><li><strong>数据分片与分布</strong>：将大规模数据切分为多个小块，分布在不同的存储节点上。这样可以提高数据的并行存储与访问能力，降低单一存储节点的压力。常用算法有一致性哈希，用于确保数据均匀分布。</li><li><strong>分布式文件系统</strong>：如HDFS（Hadoop Distributed File System）和Ceph，通过在多个节点上存储和管理数据，提供高扩展性、容错能力和高可用性。</li><li><strong>数据复制</strong>：将数据的多个副本分布在不同节点或地理区域，防止单点故障导致数据丢失，确保高可用性。</li></ul><h3 id="2-数据一致性与分布式一致性算法"><a href="#2-数据一致性与分布式一致性算法" class="headerlink" title="2. 数据一致性与分布式一致性算法"></a>2. <strong>数据一致性与分布式一致性算法</strong></h3><ul><li><strong>CAP理论</strong>：在分布式系统中，需要在一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）之间做权衡。云存储系统通常根据应用场景选择合适的一致性模型（如强一致性、最终一致性）。</li><li><strong>分布式一致性算法</strong>：常用算法包括Paxos、Raft等，用于确保在分布式环境中数据的一致性，特别是在存在网络分区或节点故障的情况下。</li></ul><h3 id="3-冗余与容错技术"><a href="#3-冗余与容错技术" class="headerlink" title="3. 冗余与容错技术"></a>3. <strong>冗余与容错技术</strong></h3><ul><li><strong>副本机制</strong>：为了确保数据的高可用性和容错性，云存储系统通常采用数据副本策略，例如三副本机制，每份数据在不同节点存储三份副本，防止数据丢失。</li><li><strong>纠删码（Erasure Coding）</strong>：通过将数据分成多个数据块和校验块，确保在丢失部分数据块的情况下仍然可以恢复完整数据。相比传统的副本机制，纠删码能更有效地节省存储空间。</li></ul><h3 id="4-数据加密与安全技术"><a href="#4-数据加密与安全技术" class="headerlink" title="4. 数据加密与安全技术"></a>4. <strong>数据加密与安全技术</strong></h3><ul><li><strong>传输加密</strong>：使用TLS&#x2F;SSL等加密协议保护数据在传输过程中免受攻击，防止数据被窃听或篡改。</li><li><strong>存储加密</strong>：在存储数据之前对数据进行加密，防止未授权的用户访问。常用加密算法有AES等对称加密技术。加密密钥通常由专门的密钥管理系统（KMS）进行管理。</li><li><strong>访问控制</strong>：基于身份验证和访问权限管理（如IAM，Identity and Access Management），确保只有经过授权的用户和应用程序可以访问存储中的数据。可以采用基于角色的访问控制（RBAC）和细粒度的权限管理。</li></ul><h3 id="5-内容分发网络（CDN）技术"><a href="#5-内容分发网络（CDN）技术" class="headerlink" title="5. 内容分发网络（CDN）技术"></a>5. <strong>内容分发网络（CDN）技术</strong></h3><ul><li><strong>缓存和边缘节点</strong>：通过在全球部署多个缓存节点，将静态内容（如图片、视频等）分发到离用户最近的节点，减少访问延迟，提高用户体验。</li><li><strong>动态调度与负载均衡</strong>：CDN会根据用户的地理位置和网络状态，动态选择最优的边缘节点来提供数据服务，优化传输路径，提升内容传输速度和稳定性。</li></ul><h3 id="6-备份与容灾技术"><a href="#6-备份与容灾技术" class="headerlink" title="6. 备份与容灾技术"></a>6. <strong>备份与容灾技术</strong></h3><ul><li><strong>异地备份</strong>：将数据备份到多个地理位置的不同数据中心，防止单一数据中心发生灾难时造成数据丢失。异地备份是容灾的重要手段。</li><li><strong>快照技术</strong>：快照技术允许系统在某一时刻记录存储数据的状态，用于快速恢复到某个历史时刻的数据版本。快照既可用于备份，也可用于灾难恢复。</li></ul><h3 id="7-数据去重与压缩技术"><a href="#7-数据去重与压缩技术" class="headerlink" title="7. 数据去重与压缩技术"></a>7. <strong>数据去重与压缩技术</strong></h3><ul><li><strong>数据去重</strong>：通过识别和消除重复数据块，减少存储数据的冗余，从而节省存储空间。去重技术通常在备份系统中应用较广。</li><li><strong>数据压缩</strong>：在存储之前对数据进行压缩以减少数据占用的存储空间，从而提高存储效率，降低存储成本。</li></ul><h3 id="8-自动化管理与监控技术"><a href="#8-自动化管理与监控技术" class="headerlink" title="8. 自动化管理与监控技术"></a>8. <strong>自动化管理与监控技术</strong></h3><ul><li><strong>自动扩展与负载均衡</strong>：根据存储需求的变化，系统能够自动增加或减少存储资源（如节点或容量），同时在多个节点之间自动均衡负载，避免单点过载。</li><li><strong>监控与告警系统</strong>：实时监控存储系统的运行状态，包括磁盘空间、网络吞吐量、I&#x2F;O性能等，并在发现异常时自动告警，确保系统的稳定性和可用性。</li></ul><h3 id="9-分布式缓存技术"><a href="#9-分布式缓存技术" class="headerlink" title="9. 分布式缓存技术"></a>9. <strong>分布式缓存技术</strong></h3><ul><li><strong>热点数据缓存</strong>：将经常访问的数据存储在内存中，减少磁盘I&#x2F;O操作，提升系统性能。分布式缓存系统如Memcached、Redis等可以用来优化数据访问速度。</li><li><strong>缓存一致性</strong>：在多副本的分布式系统中，缓存的一致性问题需要通过缓存失效策略、TTL（Time To Live）等机制进行管理，确保缓存的数据与源数据保持一致。</li></ul><h3 id="10-大数据处理与分析技术"><a href="#10-大数据处理与分析技术" class="headerlink" title="10. 大数据处理与分析技术"></a>10. <strong>大数据处理与分析技术</strong></h3><ul><li><strong>分布式计算框架</strong>：结合大数据处理需求，云存储系统常与大数据框架（如Hadoop、Spark）集成，用于处理和分析存储在云端的大规模数据。</li><li><strong>数据湖架构</strong>：通过将结构化、非结构化数据整合到统一的存储系统中，构建可支持大规模分析与机器学习的数据湖，便于大数据处理。</li></ul><hr><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>云存储的关键技术涵盖了从数据存储、分发到安全保障的各个方面，包括分布式存储、数据一致性、冗余容错、数据加密、CDN、备份容灾等。这些技术的结合不仅确保了云存储系统的高性能和高可用性，还能保证数据的安全性和存储的效率。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1. A. Y. Aldailamy, A. Muhammed, N. A. W. A. Hamid, R. Latip and W. Ismail, &quot;Efficient Multi-Cloud Storage Using Online Dynamic Replication and Placement Algorithms for Online Social Networks,&quot; in IEEE Access, vol. 12, pp. 20409-20425, 2024, doi: 10.1109/ACCESS.2024.3361748.</span><br><span class="line">keywords: &#123;Costs;Heuristic algorithms;Social networking (online);Quality of service;Cloud computing;Blogs;Optimization methods;Online services;Dynamic replication;latency and cost optimization;multi-cloud;online placement algorithm;online social network;storage as a service&#125;,</span><br><span class="line"></span><br><span class="line">2. A. B. Kathole et al., &quot;Secure Federated Cloud Storage Protection Strategy Using Hybrid Heuristic Attribute-Based Encryption With Permissioned Blockchain,&quot; in IEEE Access, vol. 12, pp. 117154-117169, 2024, doi: 10.1109/ACCESS.2024.3447829.</span><br><span class="line">keywords: &#123;Cloud computing;Security;Blockchains;Monitoring;Secure storage;Diseases;Medical services;Biomedical monitoring;Internet of Medical Things;Attribute-based encryption;blockchain technology;federated learning;health monitoring;IoMT security;optimal key generation&#125;,</span><br><span class="line"></span><br><span class="line">3. X. Feng, J. Ma, H. Wang, S. Wen, Y. Xiang and Y. Miao, &quot;Space-Efficient Storage Structure of Blockchain Transactions Supporting Secure Verification,&quot; in IEEE Transactions on Cloud Computing, vol. 11, no. 3, pp. 2631-2645, 1 July-Sept. 2023, doi: 10.1109/TCC.2022.3220664.</span><br><span class="line">keywords: &#123;Blockchains;Indexes;Peer-to-peer computing;Bitcoin;Privacy;Hash functions;Cloud computing;Blockchain storage;data-heavy applications;privacy preserving;simplified payment verification&#125;,</span><br><span class="line"></span><br><span class="line">4. Ghemawat, S., Gobioff, H., &amp; Leung, S.-T. (2003). The Google file system. Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles - SOSP ’03.</span><br><span class="line"></span><br><span class="line">5. 肖逸飞.云存储中基于纠删码的数据容错技术研究[D].电子科技大学,2023.DOI:10.27005/d.cnki.gdzku.2023.000055.</span><br><span class="line"></span><br><span class="line">6. Nachiappan R, Javadi B, Calherios R, et al. Cloud storage reliability for big data applications:</span><br><span class="line"> Astate of the art survey[J]. Journal of Network and Computer Applications, 2017, 97: 35-47.</span><br><span class="line"></span><br><span class="line"> 7. Y. Zhang et al., &quot;AE: An Asymmetric Extremum content defined chunking algorithm for fast and bandwidth-efficient data deduplication,&quot; 2015 IEEE Conference on Computer Communications (INFOCOM), Hong Kong, China, 2015, pp. 1337-1345, doi: 10.1109/INFOCOM.2015.7218510.</span><br><span class="line">keywords: &#123;Throughput;Algorithm design and analysis;Computers;Redundancy;Power capacitors;Conferences;Arrays&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1、分布式系统</p><p><a href="https://blog.csdn.net/weixin_43618070/article/details/90755070">https://blog.csdn.net/weixin_43618070/article/details/90755070</a></p><p>2、云存储的应用</p><p><a href="https://blog.csdn.net/Tiger_lin1/article/details/139752385?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-139752385-blog-140593592.235%5Ev43%5Epc_blog_bottom_relevance_base6&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">https://blog.csdn.net/Tiger_lin1/article/details/139752385?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-139752385-blog-140593592.235^v43^pc_blog_bottom_relevance_base6&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 讨论，课程，其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈</title>
      <link href="/archives/16518a5d.html"/>
      <url>/archives/16518a5d.html</url>
      
        <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>s</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> st[N],q[N],idx,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">        <span class="keyword">while</span>(idx &gt; <span class="number">0</span> &amp;&amp; st[idx] &gt;= q[i]) idx--;</span><br><span class="line">        <span class="keyword">if</span>(idx == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;-1 &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; st[idx] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        st[++idx] = q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,k,q[N],idx[N],hh,tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    <span class="comment">// 求最小值</span></span><br><span class="line">    hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(hh &lt; tt &amp;&amp; idx[hh] &lt; i - k + <span class="number">1</span>) hh++;</span><br><span class="line">        <span class="keyword">while</span>(hh &lt; tt &amp;&amp; q[idx[tt<span class="number">-1</span>]] &gt;= q[i]) tt--; <span class="comment">// 把末尾大于idx[i]的弹出</span></span><br><span class="line">        idx[tt++] = i;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) cout &lt;&lt; q[idx[hh]] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(hh &lt; tt &amp;&amp; idx[hh] &lt; i - k + <span class="number">1</span>) hh++;</span><br><span class="line">        <span class="keyword">while</span>(hh &lt; tt &amp;&amp; q[idx[tt<span class="number">-1</span>]] &lt;= q[i]) tt--;</span><br><span class="line">        idx[tt++] = i;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) cout &lt;&lt; q[idx[hh]] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用STL-deque<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">deque&lt;<span class="type">int</span>&gt; idx; <span class="comment">// 双端数组</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> q[N],n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 判断队首的索引是否应被移除</span></span><br><span class="line">        <span class="keyword">if</span>(!idx.<span class="built_in">empty</span>() &amp;&amp; idx.<span class="built_in">front</span>() &lt; i - k + <span class="number">1</span>) idx.<span class="built_in">pop_front</span>(); <span class="comment">// 从队首移除</span></span><br><span class="line">        <span class="keyword">while</span>(!idx.<span class="built_in">empty</span>() &amp;&amp; q[idx.<span class="built_in">back</span>()] &gt;= q[i]) idx.<span class="built_in">pop_back</span>();</span><br><span class="line">        idx.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) cout &lt;&lt; q[idx.<span class="built_in">front</span>()] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    idx.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!idx.<span class="built_in">empty</span>() &amp;&amp; idx.<span class="built_in">front</span>() &lt; i - k + <span class="number">1</span>) idx.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">while</span>(!idx.<span class="built_in">empty</span>() &amp;&amp; q[idx.<span class="built_in">back</span>()] &lt;= q[i]) idx.<span class="built_in">pop_back</span>();</span><br><span class="line">        idx.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) cout &lt;&lt; q[idx.<span class="built_in">front</span>()] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ul><li>单调队列+优化DP<blockquote><p>在长度为n的数组中怎样取数使得取出来的数字和最大，要求每连续k个数必须要取一个数字，例如n&#x3D;5 k&#x3D;2，数组为-1，-2，3，4，-2，最佳取数方式为-1+3+4，返回值为6。这个题目有原题嘛，怎么用dp求解呢</p></blockquote></li></ul><p>$dp[i]$的状态可以从$dp[i-k]$到$dp[i-1]$这个区间的任意一个转移过来，且从这些状态里面的<code>最大值</code>转移过来一定是最优的，用一个单调队列动态维护这个区间的最大值即可</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxResult</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        std::deque&lt;<span class="type">int</span>&gt; q; <span class="comment">//q代表下标</span></span><br><span class="line">        </span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//把不在可转移区间范围内的剔除</span></span><br><span class="line">            <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; i - q.<span class="built_in">front</span>() &gt; k) q.<span class="built_in">pop_front</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//特判一开始为空的状态 如果不为空就直接从最大的状态转移</span></span><br><span class="line">            <span class="keyword">if</span>(!i) dp[i] = nums[i];</span><br><span class="line">            <span class="keyword">else</span> dp[i] = dp[q.<span class="built_in">front</span>()] + nums[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//维护队列单调性</span></span><br><span class="line">            <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; dp[q.<span class="built_in">back</span>()] &lt;= dp[i]) q.<span class="built_in">pop_back</span>();</span><br><span class="line">            q.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二篇测试</title>
      <link href="/archives/eb4b5afe.html"/>
      <url>/archives/eb4b5afe.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d495e29674e800d0278ffb8c9d7e30b155289d17b8b32fceccb5e9944ef16f9b">10d79030e8222445804370796b90fca13ebba6aade91a8140515a81d239502f1fc4f3a7d09326500c7dd92b1e5c65b3ffe8bdaf41cb2702ddc810fb65023d275c0c8e685ca95e3d1b5cf5b04a83681988a6f5a416dfbbee48db6e38ea7ed3e9ace2c025994fabc37a7d2578571823d58ab9b774dfbf4de2835e6fa83b3381ef08ffaefa6336c1541e123f4890d6a0e524407c081e4a19c8355336a8c5cfd479b1f43ae2b3d0f98e788f33cabfe79b53b4962bbb4bcb06a3cacd627c63312ca21a2711e33127d38e92325be4873bbf38acca02630f019ac7ee2d5be2dc419958825033ff45106f2b1b0b294027fc00615ca83f685ee23a6e0d80415c337ff6c02fe3d3a71551ac59b922b9a89eace727a2fe72cb814527282ee0456e0d922a93aea8ca85902b7dff594fc010dc2a46d50d3c0af2f9ca1491f83b898c47a0c5565df8690354a3096222946c978e0134397cd0c4305985152837450f0331f41990f9f204965fd025dbedadbac337cfdafaad1985380feec6929fba4a9c482e25fe5d9bb7d54d1e57fc06d3fb2a80ecd4727</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Test1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码展示</title>
      <link href="/archives/783a035c.html"/>
      <url>/archives/783a035c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/archives/5c2fafc7.html"/>
      <url>/archives/5c2fafc7.html</url>
      
        <content type="html"><![CDATA[<h1 id="重新生成文章"><a href="#重新生成文章" class="headerlink" title="重新生成文章"></a>重新生成文章</h1><p>hexo n “第一篇文章”</p><h1 id="重新生成整个博客"><a href="#重新生成整个博客" class="headerlink" title="重新生成整个博客"></a>重新生成整个博客</h1><p>hexo g</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>hexo s</p><h1 id="上传至github"><a href="#上传至github" class="headerlink" title="上传至github"></a>上传至github</h1><p>hexo c<br>hexo d</p><h1 id="butterfly主题安装"><a href="#butterfly主题安装" class="headerlink" title="butterfly主题安装"></a>butterfly主题安装</h1><p><a href="https://butterfly.js.org/posts/dc584b87">https://butterfly.js.org/posts/dc584b87</a></p><h1 id="紧急备份"><a href="#紧急备份" class="headerlink" title="紧急备份"></a>紧急备份</h1><p>git clone 远程仓库的ssh<br>cd blog<br>npm install</p><h1 id="测试图片标题"><a href="#测试图片标题" class="headerlink" title="测试图片标题"></a>测试图片标题</h1><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F13556666697%2F1000.jpg&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1663479090&t=293a390597dc1a6014fda3e3acf80945" alt="My Favorite Movie"></p>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essays </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
